import { Observable, BehaviorSubject, Subject } from 'rxjs';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { IStoreNotifier, IStoreSettings } from './IStore';
import { action } from './store.enum';
import { IOdataCollection } from './IOdataCollection';
/**
 * Creates and Odata service store that follows the observable store pattern.
 * Provides default odata rest methods
 */
export declare abstract class ODataStore<T> {
    protected http: HttpClient;
    protected settings: IStoreSettings;
    private _initState;
    abstract baseUrl: string;
    protected _state$: BehaviorSubject<IOdataCollection<T>>;
    state$: Observable<IOdataCollection<T>>;
    protected _notifier$: Subject<IStoreNotifier<T>>;
    notifier$: Observable<IStoreNotifier<T>>;
    protected _response$: Subject<HttpResponse<IOdataCollection<T>>>;
    response$: Observable<HttpResponse<IOdataCollection<T>>>;
    private _settings;
    constructor(http: HttpClient, settings?: IStoreSettings);
    query: (queryString?: string) => void;
    get: <K extends keyof T>(value: T, keys?: K | K[], queryString?: string) => Observable<T>;
    insert: (item: T, queryString?: string) => void;
    update: <K extends keyof T>(item: T, keys?: K | K[], queryString?: string, method?: "put" | "post") => void;
    patch: <K extends keyof T>(item: T, keys?: K | K[], queryString?: string, method?: "put" | "post" | "patch") => void;
    remove: <K extends keyof T>(item: T, keys?: K | K[], method?: "post" | "delete") => void;
    protected updateStore: <K extends keyof T>(item: T, operation: "update" | "delete" | "insert", keys?: K | K[]) => void;
    protected fillStore: (odata: IOdataCollection<T>) => void;
    protected dispatchNotifier: (act: action, state?: T) => void;
    quoteKey: (id: any) => string;
}
