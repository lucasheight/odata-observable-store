import { Observable, BehaviorSubject, Subject } from 'rxjs';
import { IStoreNotifier, IStoreSettings } from './IStore';
import { action } from './store.enum';
export declare abstract class Store<T> {
    protected settings: IStoreSettings;
    state$: Observable<T>;
    protected _state$: BehaviorSubject<T>;
    protected _notifier$: Subject<IStoreNotifier<T>>;
    notifier$: Observable<IStoreNotifier<T>>;
    private _settings;
    constructor(initialState: T, settings?: IStoreSettings);
    protected getState(): T;
    protected setState(val: T): void;
    protected dispatchNotifier: (act: action, state?: T) => void;
}
