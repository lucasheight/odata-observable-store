import { BehaviorSubject, Subject } from 'rxjs';
import { action } from './store.enum';
var Store = /** @class */ (function () {
    function Store(initialState, settings) {
        var _this = this;
        if (settings === void 0) { settings = null; }
        this.settings = settings;
        this._notifier$ = new Subject();
        this.notifier$ = this._notifier$.asObservable();
        this._settings = {
            //defaults
            notifyOnDelete: true,
            notifyOnGet: false,
            notifyOnInsert: true,
            notifyOnUpdate: true
        };
        this.dispatchNotifier = function (act, state) {
            if (state === void 0) { state = null; }
            var settings = _this._settings;
            var note = { action: act, state: state };
            var store = _this._state$.getValue();
            switch (act) {
                case action.Query:
                    note.message = "Query completed.";
                    break;
                case action.Get:
                    note.message = "Get action completed";
                    break;
                case action.Delete:
                    note.message = "Record deleted";
                    break;
                case action.Insert:
                    note.message = "New record inserted";
                    break;
                case action.Update:
                    note.message = "Record updated";
                    break;
                default:
                    break;
            }
            if (settings.notifyOnDelete && act == action.Delete
                || settings.notifyOnGet && act == action.Get
                || settings.notifyOnInsert && act == action.Insert
                || settings.notifyOnUpdate && act == action.Update) {
                _this._notifier$.next(note);
            }
        };
        if (settings) {
            this._settings = Object.assign({}, this._settings, settings);
        }
        this._state$ = new BehaviorSubject(initialState);
        this.state$ = this._state$.asObservable();
    }
    Store.prototype.getState = function () {
        return this._state$.getValue();
    };
    Store.prototype.setState = function (val) {
        this._state$.next(val);
    };
    return Store;
}());
export { Store };
//# sourceMappingURL=store.js.map